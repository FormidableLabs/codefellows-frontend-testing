!!! 5
html(lang='en')
head
    meta(charset='utf-8')
    block meta
    meta(name='apple-mobile-web-app-capable', content='yes')
    meta(name='apple-mobile-web-app-status-bar-style', content='black-translucent')
    meta(name='viewport', content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no')

    link(rel='stylesheet', href='css/reveal.min.css')
    link#theme(rel='stylesheet', href='css/theme/formidable.css')
    //- For syntax highlighting
    link(rel='stylesheet', href='lib/css/zenburn.css')
    link(rel='stylesheet', href='css/site.css')

    //- If the query includes 'print-pdf', use the PDF print sheet
    script
      document.write( '<link rel="stylesheet" href="css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
    //if lt IE 9
      script(src='lib/js/html5shiv.js')

  body
    .reveal
      .slides
        block slides

    script(src='lib/js/head.min.js')
    script(src='js/reveal.min.js')
    script
      (function (root) {
        var _toArray = function (obj) {
          return Array.prototype.slice.call(obj);
        };

        // Escape HTML code.
        var _escapeHtml = function () {
          _toArray(document.querySelectorAll("pre.html"))
            .forEach(function (code) {
              code.innerHTML = "<code class='html'>" + code.innerHTML + "</code>";
            });
        };

        _escapeHtml();

        // Highlight source code.
        //
        // Extended wrapper for bringing in markdown.
        var _highlight = function () {
          // Iterate codes and mutate for highlighting.
          var codes = document.querySelectorAll("code");

          _toArray(codes).forEach(function (code) {
            var parent = code.parentNode,
              grand = parent.parentNode,
              match;

            // Strip initial empty line.
            code.innerHTML = code.innerHTML.replace(/^\s*\n/, "");

            // Find indent, if any.
            match = /^(\s+)/.exec(code.innerHTML);
            if (match) {
              // Strip forward whitespace in first section.
              code.innerHTML = code.innerHTML.substr(match[0].length)

              // Strip in remaining parts.
              code.innerHTML = code.innerHTML
                .split("\n" + match[0])
                .join("\n");
            }
          });

          // Initialize plugin.
          hljs.initHighlightingOnLoad();
        };

        // Full list of configuration options available here:
        // https://github.com/hakimel/reveal.js#configuration
        Reveal.initialize({
          controls: false,
          progress: true,
          history: true,
          center: true,
          theme: "formidable", // available themes are in /css/theme
          transition: "linear", // default/cube/page/concave/zoom/linear/fade/none -- Reveal.getQueryHash().transition || 'default'
          // Optional libraries used to extend on reveal.js
          dependencies: [
            { src: 'lib/js/classList.js', condition: function () { return !document.body.classList; } },
            { src: 'plugin/highlight/highlight.js', async: true, callback: _highlight },
            { src: 'plugin/zoom-js/zoom.js', async: true, condition: function () { return !!document.body.classList; } },
            { src: 'plugin/notes/notes.js', async: true, condition: function () { return !!document.body.classList; } }
            // { src: 'plugin/search/search.js', async: true, condition: function() { return !!document.body.classList; } }
            // { src: 'plugin/remotes/remotes.js', async: true, condition: function() { return !!document.body.classList; } }
          ]
        });
      }).call(this);
